import sys
import os
from lxml import etree

class Document:
	def __init__(self, filepath):
		self.id = filepath[:-4]
		self.tweets = getTweets(filepath)
	
	def getId(self):
		return self.id

def main(argv):
	trainingdir = argv[1]
	testdir = argv[2]
	languages = ['english']

	for language in languages:
		X = loadData(trainingdir, language)

def getTweets(path):
    tweets = []
    filehandle = open(path, 'r')
    for line in filehandle:
        root = etree.fromstring(line)
    	for document in root.xpath("//document"):
			tweets.append(document.text)
	print(tweets)
	return tweets
		
def loadData(trainingdir, language):
	X = []
	languagedir = os.path.join(trainingdir, language)
	for filepath in os.listdir(languagedir):
		if filepath.endswith('xml'): # they are tweets
			X.append(Document(filepath))
	return X

'''
	X, Y = 
	if not len(argv)==2:
		print('Usage: main.py dutch|english|italian|spanish')
	else:
                languagedir = 'training/' + argv[1]
                tweetdict = readTweets(languagedir)
                truthdict = readTruths(languagedir)
                X, Y = preprocess(tweetdict, truthdict, 1)
                vec = TfidfVectorizer(min_df=5)
                cls = svm.LinearSVC(C=10)
                classifier = Pipeline( [('vec', vec), ('cls', cls)])
                scores = cross_validation.cross_val_score(classifier, X, Y, cv=5, scoring='accuracy')
                print(scores.mean())
		
def readTweets(languagedir):
	tweetdict = defaultdict(list)
	for subdir, dirs, files in os.walk(languagedir):
		for file in files:
			if file.endswith('.xml'):
				user = file[:-4]
				openfile = open(languagedir+'/'+file, 'r')
				for line in openfile:
					if not line[0]=='<':
						tweetbody = line[20:-17]
						tweetdict[user].append(tweetbody)
	return tweetdict

def preprocess(tweetdict, truthdict, label):
	X, Y = [], []
	# tijdelijke methode om baseline te testen
	for user, tweets in tweetdict.items():
		totaltweets = ''
		for tweet in tweets:
			totaltweets += ' ' + tweet
		X.append(totaltweets)
		Y.append(truthdict[user][label])
	return X, Y
		
def readTruths(languagedir):
	truthdict = {}
	openfile = open(languagedir + '/' + 'truth.txt', 'r')
	for line in openfile:
		splits = line.split(':::')
		truthdict[splits[0]]=(splits[1],splits[2])
	return truthdict
''' 	
if __name__=='__main__':
	main(sys.argv)
